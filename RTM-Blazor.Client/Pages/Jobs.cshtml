@page "/jobs"
@inject HttpClient Http
@using RTM_Blazor.Client.Shared

<h4>Jobs</h4>
<div>
@if (jobs == null)
{
    <p><em>Loading Jobs...</em></p>
}
else
{
    <table class="table table-hover table-bordered table-responsive-md">
    <caption>List of Jobs</caption>
        <thead class="thead-dark">
            <tr>
                <th>Job Number</th>
                <th>Service Type</th>
                <th>Service Date</th>
                <th>Service Deadline</th>
                <th>Device Type</th>
                <th>Access Info</th>
                <th>Special Notes</th>
                <th>Driver</th>
                <th>Time Of Day</th>
                <th>Arrival Time</th>
                <th>Confirmed</th>
                <th>Completed</th>
                <th>Last Updated By</th>
                <th>Job Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (JobDTO job in jobs)
            {
                <tr>
                    <td> @job.JobNumber </td>
                    <td> @job.ServiceType </td>
                    <td> @job.ServiceDate.ToString("yyyy/MM/dd") </td>
                    <td> @job.ServiceDeadLine.ToString("yyyy/MM/dd") </td>
                    <td> @job.DeviceType </td>
                    <td> @job.AccessInfo </td>
                    <td> @job.SpecialNotes </td>
                    <td> @job.Driver </td>
                    <td> @job.TimeOfDay </td>
                    <td> @job.ArrivalTime.ToString("HH:mmtt") </td>
                    <td> @ConfirmedHandler(job.Confirmed) </td>
                    <td> @CompletedHandler(job.Completed) </td>
                    <td> @job.LastUpdatedBy </td>
                    <td> @job.JobAddress </td>
                </tr>
            }
        </tbody>
    </table>
}
</div>

@functions {
    List<JobDTO> jobs;
    
    protected override async Task OnInitAsync()
    {
        await RefreshJobs();
    }

    public string CompletedHandler(bool value) {
        return (value) ? "Completed" : "Not Completed";
    }
    public string ConfirmedHandler(bool value) {
        return (value) ? "Confirmed" : "Not Confirmed";
    }

    private async Task RefreshJobs() {
        Http.BaseAddress = new Uri("http://127.0.0.1:5555");
        var retrieveJobs = await Http.GetJsonAsync<JobDTO[]>("/api/Jobs");
        jobs = retrieveJobs.ToList().OrderBy(x => x.ServiceDate).ToList();
        StateHasChanged();
    }
}
