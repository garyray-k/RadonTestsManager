// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RadonTestsManager.DBContext;

namespace RadonTestsManager.Migrations
{
    [DbContext(typeof(RadonTestsManagerContext))]
    [Migration("20190204214800_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RadonTestsManager.CRMs.Models.ContinuousRadonMonitor", b =>
                {
                    b.Property<int>("CRMId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastBatteryChangeDate");

                    b.Property<DateTime>("LastCalibrationDate");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int?>("LocationAddressId");

                    b.Property<int>("MonitorNumber");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int>("SerialNumber");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TestFinish");

                    b.Property<DateTime>("TestStart");

                    b.HasKey("CRMId");

                    b.HasIndex("LocationAddressId");

                    b.ToTable("ContinuousRadonMonitors");
                });

            modelBuilder.Entity("RadonTestsManager.CRMs.Models.CRMMaintenanceLogEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionsTaken");

                    b.Property<int?>("CRMId1");

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("MaintenanceDescription");

                    b.HasKey("EntryId");

                    b.HasIndex("CRMId1");

                    b.ToTable("CRMMaintenanceLogs");
                });

            modelBuilder.Entity("RadonTestsManager.Jobs.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessInfo");

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<int?>("ContinousRadonMonitorCRMId");

                    b.Property<string>("DeviceType");

                    b.Property<string>("Driver");

                    b.Property<int?>("JobAddressAddressId");

                    b.Property<int>("JobNumber");

                    b.Property<int?>("LSVialId");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<DateTime>("ServiceDeadLine");

                    b.Property<string>("ServiceType");

                    b.Property<string>("SpecialNotes");

                    b.HasKey("JobId");

                    b.HasIndex("ContinousRadonMonitorCRMId");

                    b.HasIndex("JobAddressAddressId");

                    b.HasIndex("LSVialId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("RadonTestsManager.LSVials.Models.LSVial", b =>
                {
                    b.Property<int>("LSVialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastUpdatedBy");

                    b.Property<int>("SerialNumber");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TestFinish");

                    b.Property<DateTime>("TestStart");

                    b.HasKey("LSVialId");

                    b.ToTable("LSVials");
                });

            modelBuilder.Entity("RadonTestsManager.Model.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CustomerName");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RadonTestsManager.Utility.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RadonTestsManager.Utility.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RadonTestsManager.Utility.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RadonTestsManager.Utility.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RadonTestsManager.Utility.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RadonTestsManager.CRMs.Models.ContinuousRadonMonitor", b =>
                {
                    b.HasOne("RadonTestsManager.Model.Address", "Location")
                        .WithMany()
                        .HasForeignKey("LocationAddressId");
                });

            modelBuilder.Entity("RadonTestsManager.CRMs.Models.CRMMaintenanceLogEntry", b =>
                {
                    b.HasOne("RadonTestsManager.CRMs.Models.ContinuousRadonMonitor", "CRMId")
                        .WithMany("MaintenanceLog")
                        .HasForeignKey("CRMId1");
                });

            modelBuilder.Entity("RadonTestsManager.Jobs.Models.Job", b =>
                {
                    b.HasOne("RadonTestsManager.CRMs.Models.ContinuousRadonMonitor", "ContinousRadonMonitor")
                        .WithMany("JobHistory")
                        .HasForeignKey("ContinousRadonMonitorCRMId");

                    b.HasOne("RadonTestsManager.Model.Address", "JobAddress")
                        .WithMany("JobHistory")
                        .HasForeignKey("JobAddressAddressId");

                    b.HasOne("RadonTestsManager.LSVials.Models.LSVial", "LSvial")
                        .WithMany("JobHistory")
                        .HasForeignKey("LSVialId");
                });
#pragma warning restore 612, 618
        }
    }
}
